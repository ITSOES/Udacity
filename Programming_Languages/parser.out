Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> re
Rule 1     re -> re BAR re
Rule 2     re -> STRING
Rule 3     re -> re re
Rule 4     re -> re STAR
Rule 5     re -> LPAREN re RPAREN
Rule 6     re -> LBRACKET re RBRACKET

Terminals, with rules where they appear

BAR                  : 1
LBRACKET             : 6
LPAREN               : 5
RBRACKET             : 6
RPAREN               : 5
STAR                 : 4
STRING               : 2
error                : 

Nonterminals, with rules where they appear

re                   : 1 1 3 3 4 5 6 0

Parsing method: LALR

state 0

    (0) S' -> . re
    (1) re -> . re BAR re
    (2) re -> . STRING
    (3) re -> . re re
    (4) re -> . re STAR
    (5) re -> . LPAREN re RPAREN
    (6) re -> . LBRACKET re RBRACKET

    STRING          shift and go to state 1
    LPAREN          shift and go to state 4
    LBRACKET        shift and go to state 2

    re                             shift and go to state 3

state 1

    (2) re -> STRING .

    BAR             reduce using rule 2 (re -> STRING .)
    STAR            reduce using rule 2 (re -> STRING .)
    STRING          reduce using rule 2 (re -> STRING .)
    LPAREN          reduce using rule 2 (re -> STRING .)
    LBRACKET        reduce using rule 2 (re -> STRING .)
    $end            reduce using rule 2 (re -> STRING .)
    RBRACKET        reduce using rule 2 (re -> STRING .)
    RPAREN          reduce using rule 2 (re -> STRING .)


state 2

    (6) re -> LBRACKET . re RBRACKET
    (1) re -> . re BAR re
    (2) re -> . STRING
    (3) re -> . re re
    (4) re -> . re STAR
    (5) re -> . LPAREN re RPAREN
    (6) re -> . LBRACKET re RBRACKET

    STRING          shift and go to state 1
    LPAREN          shift and go to state 4
    LBRACKET        shift and go to state 2

    re                             shift and go to state 5

state 3

    (0) S' -> re .
    (1) re -> re . BAR re
    (3) re -> re . re
    (4) re -> re . STAR
    (1) re -> . re BAR re
    (2) re -> . STRING
    (3) re -> . re re
    (4) re -> . re STAR
    (5) re -> . LPAREN re RPAREN
    (6) re -> . LBRACKET re RBRACKET

    BAR             shift and go to state 8
    STAR            shift and go to state 6
    STRING          shift and go to state 1
    LPAREN          shift and go to state 4
    LBRACKET        shift and go to state 2

    re                             shift and go to state 7

state 4

    (5) re -> LPAREN . re RPAREN
    (1) re -> . re BAR re
    (2) re -> . STRING
    (3) re -> . re re
    (4) re -> . re STAR
    (5) re -> . LPAREN re RPAREN
    (6) re -> . LBRACKET re RBRACKET

    STRING          shift and go to state 1
    LPAREN          shift and go to state 4
    LBRACKET        shift and go to state 2

    re                             shift and go to state 9

state 5

    (6) re -> LBRACKET re . RBRACKET
    (1) re -> re . BAR re
    (3) re -> re . re
    (4) re -> re . STAR
    (1) re -> . re BAR re
    (2) re -> . STRING
    (3) re -> . re re
    (4) re -> . re STAR
    (5) re -> . LPAREN re RPAREN
    (6) re -> . LBRACKET re RBRACKET

    RBRACKET        shift and go to state 10
    BAR             shift and go to state 8
    STAR            shift and go to state 6
    STRING          shift and go to state 1
    LPAREN          shift and go to state 4
    LBRACKET        shift and go to state 2

    re                             shift and go to state 7

state 6

    (4) re -> re STAR .

    BAR             reduce using rule 4 (re -> re STAR .)
    STAR            reduce using rule 4 (re -> re STAR .)
    STRING          reduce using rule 4 (re -> re STAR .)
    LPAREN          reduce using rule 4 (re -> re STAR .)
    LBRACKET        reduce using rule 4 (re -> re STAR .)
    $end            reduce using rule 4 (re -> re STAR .)
    RBRACKET        reduce using rule 4 (re -> re STAR .)
    RPAREN          reduce using rule 4 (re -> re STAR .)


state 7

    (3) re -> re re .
    (1) re -> re . BAR re
    (3) re -> re . re
    (4) re -> re . STAR
    (1) re -> . re BAR re
    (2) re -> . STRING
    (3) re -> . re re
    (4) re -> . re STAR
    (5) re -> . LPAREN re RPAREN
    (6) re -> . LBRACKET re RBRACKET

    BAR             reduce using rule 3 (re -> re re .)
    STRING          reduce using rule 3 (re -> re re .)
    LPAREN          reduce using rule 3 (re -> re re .)
    LBRACKET        reduce using rule 3 (re -> re re .)
    $end            reduce using rule 3 (re -> re re .)
    RBRACKET        reduce using rule 3 (re -> re re .)
    RPAREN          reduce using rule 3 (re -> re re .)
    STAR            shift and go to state 6

  ! STAR            [ reduce using rule 3 (re -> re re .) ]
  ! BAR             [ shift and go to state 8 ]
  ! STRING          [ shift and go to state 1 ]
  ! LPAREN          [ shift and go to state 4 ]
  ! LBRACKET        [ shift and go to state 2 ]

    re                             shift and go to state 7

state 8

    (1) re -> re BAR . re
    (1) re -> . re BAR re
    (2) re -> . STRING
    (3) re -> . re re
    (4) re -> . re STAR
    (5) re -> . LPAREN re RPAREN
    (6) re -> . LBRACKET re RBRACKET

    STRING          shift and go to state 1
    LPAREN          shift and go to state 4
    LBRACKET        shift and go to state 2

    re                             shift and go to state 11

state 9

    (5) re -> LPAREN re . RPAREN
    (1) re -> re . BAR re
    (3) re -> re . re
    (4) re -> re . STAR
    (1) re -> . re BAR re
    (2) re -> . STRING
    (3) re -> . re re
    (4) re -> . re STAR
    (5) re -> . LPAREN re RPAREN
    (6) re -> . LBRACKET re RBRACKET

    RPAREN          shift and go to state 12
    BAR             shift and go to state 8
    STAR            shift and go to state 6
    STRING          shift and go to state 1
    LPAREN          shift and go to state 4
    LBRACKET        shift and go to state 2

    re                             shift and go to state 7

state 10

    (6) re -> LBRACKET re RBRACKET .

    BAR             reduce using rule 6 (re -> LBRACKET re RBRACKET .)
    STAR            reduce using rule 6 (re -> LBRACKET re RBRACKET .)
    STRING          reduce using rule 6 (re -> LBRACKET re RBRACKET .)
    LPAREN          reduce using rule 6 (re -> LBRACKET re RBRACKET .)
    LBRACKET        reduce using rule 6 (re -> LBRACKET re RBRACKET .)
    $end            reduce using rule 6 (re -> LBRACKET re RBRACKET .)
    RBRACKET        reduce using rule 6 (re -> LBRACKET re RBRACKET .)
    RPAREN          reduce using rule 6 (re -> LBRACKET re RBRACKET .)


state 11

    (1) re -> re BAR re .
    (1) re -> re . BAR re
    (3) re -> re . re
    (4) re -> re . STAR
    (1) re -> . re BAR re
    (2) re -> . STRING
    (3) re -> . re re
    (4) re -> . re STAR
    (5) re -> . LPAREN re RPAREN
    (6) re -> . LBRACKET re RBRACKET

  ! shift/reduce conflict for BAR resolved as shift
  ! shift/reduce conflict for STAR resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
    $end            reduce using rule 1 (re -> re BAR re .)
    RBRACKET        reduce using rule 1 (re -> re BAR re .)
    RPAREN          reduce using rule 1 (re -> re BAR re .)
    BAR             shift and go to state 8
    STAR            shift and go to state 6
    STRING          shift and go to state 1
    LPAREN          shift and go to state 4
    LBRACKET        shift and go to state 2

  ! BAR             [ reduce using rule 1 (re -> re BAR re .) ]
  ! STAR            [ reduce using rule 1 (re -> re BAR re .) ]
  ! STRING          [ reduce using rule 1 (re -> re BAR re .) ]
  ! LPAREN          [ reduce using rule 1 (re -> re BAR re .) ]
  ! LBRACKET        [ reduce using rule 1 (re -> re BAR re .) ]

    re                             shift and go to state 7

state 12

    (5) re -> LPAREN re RPAREN .

    BAR             reduce using rule 5 (re -> LPAREN re RPAREN .)
    STAR            reduce using rule 5 (re -> LPAREN re RPAREN .)
    STRING          reduce using rule 5 (re -> LPAREN re RPAREN .)
    LPAREN          reduce using rule 5 (re -> LPAREN re RPAREN .)
    LBRACKET        reduce using rule 5 (re -> LPAREN re RPAREN .)
    $end            reduce using rule 5 (re -> LPAREN re RPAREN .)
    RBRACKET        reduce using rule 5 (re -> LPAREN re RPAREN .)
    RPAREN          reduce using rule 5 (re -> LPAREN re RPAREN .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for BAR in state 11 resolved as shift
WARNING: shift/reduce conflict for STAR in state 11 resolved as shift
WARNING: shift/reduce conflict for STRING in state 11 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 11 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 11 resolved as shift
